// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/tss.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSSService_Exchange_FullMethodName    = "/tss.TSSService/Exchange"
	TSSService_StartKeyGen_FullMethodName = "/tss.TSSService/StartKeyGen"
)

// TSSServiceClient is the client API for TSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSSServiceClient interface {
	Exchange(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TSSMessage, TSSMessage], error)
	StartKeyGen(ctx context.Context, in *KeyGenRequest, opts ...grpc.CallOption) (*KeyGenResponse, error)
}

type tSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSSServiceClient(cc grpc.ClientConnInterface) TSSServiceClient {
	return &tSSServiceClient{cc}
}

func (c *tSSServiceClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TSSMessage, TSSMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TSSService_ServiceDesc.Streams[0], TSSService_Exchange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TSSMessage, TSSMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSSService_ExchangeClient = grpc.BidiStreamingClient[TSSMessage, TSSMessage]

func (c *tSSServiceClient) StartKeyGen(ctx context.Context, in *KeyGenRequest, opts ...grpc.CallOption) (*KeyGenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyGenResponse)
	err := c.cc.Invoke(ctx, TSSService_StartKeyGen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSSServiceServer is the server API for TSSService service.
// All implementations must embed UnimplementedTSSServiceServer
// for forward compatibility.
type TSSServiceServer interface {
	Exchange(grpc.BidiStreamingServer[TSSMessage, TSSMessage]) error
	StartKeyGen(context.Context, *KeyGenRequest) (*KeyGenResponse, error)
	mustEmbedUnimplementedTSSServiceServer()
}

// UnimplementedTSSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSSServiceServer struct{}

func (UnimplementedTSSServiceServer) Exchange(grpc.BidiStreamingServer[TSSMessage, TSSMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedTSSServiceServer) StartKeyGen(context.Context, *KeyGenRequest) (*KeyGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKeyGen not implemented")
}
func (UnimplementedTSSServiceServer) mustEmbedUnimplementedTSSServiceServer() {}
func (UnimplementedTSSServiceServer) testEmbeddedByValue()                    {}

// UnsafeTSSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSSServiceServer will
// result in compilation errors.
type UnsafeTSSServiceServer interface {
	mustEmbedUnimplementedTSSServiceServer()
}

func RegisterTSSServiceServer(s grpc.ServiceRegistrar, srv TSSServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSSService_ServiceDesc, srv)
}

func _TSSService_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSSServiceServer).Exchange(&grpc.GenericServerStream[TSSMessage, TSSMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSSService_ExchangeServer = grpc.BidiStreamingServer[TSSMessage, TSSMessage]

func _TSSService_StartKeyGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).StartKeyGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_StartKeyGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).StartKeyGen(ctx, req.(*KeyGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TSSService_ServiceDesc is the grpc.ServiceDesc for TSSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tss.TSSService",
	HandlerType: (*TSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartKeyGen",
			Handler:    _TSSService_StartKeyGen_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _TSSService_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/tss.proto",
}
